import subprocess
import sys
import os


def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore'
        )
        if result.returncode != 0 and check:
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False, result.stderr
        return True, result.stdout
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False, str(e)


def check_git_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git"""
    print("\n" + "="*60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Git...")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º user.name
    success, output = run_command("git config user.name", check=False)
    if not success or not output.strip():
        print("‚ö† –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è Git: ").strip()
        if name:
            run_command(f'git config --global user.name "{name}"')
    else:
        print(f"‚úì –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {output.strip()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º user.email
    success, output = run_command("git config user.email", check=False)
    if not success or not output.strip():
        print("‚ö† Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        email = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è Git: ").strip()
        if email:
            run_command(f'git config --global user.email "{email}"')
    else:
        print(f"‚úì Email: {output.strip()}")


def check_git_repo():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
    success, _ = run_command("git rev-parse --git-dir", check=False)
    return success


def get_repository_info():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    print("\n" + "="*60)
    print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub")
    print("="*60)
    
    username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub username: ").strip()
    if not username:
        print("‚ùå Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        sys.exit(1)
    
    repo_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ").strip()
    if not repo_name:
        print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
        sys.exit(1)
    
    # –£–±–∏—Ä–∞–µ–º .git –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    repo_name = repo_name.replace('.git', '')
    
    use_ssh = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSH? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
    use_ssh = use_ssh == 'y' or use_ssh == 'yes'
    
    return username, repo_name, use_ssh


def setup_remote(username, repo_name, use_ssh):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    if use_ssh:
        remote_url = f"git@github.com:{username}/{repo_name}.git"
    else:
        remote_url = f"https://github.com/{username}/{repo_name}.git"
    
    print(f"\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ remote: {remote_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ remote origin
    success, output = run_command("git remote get-url origin", check=False)
    if success:
        current_url = output.strip()
        print(f"‚ö† Remote 'origin' —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {current_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω URL
        if current_url != remote_url:
            print(f"‚ö† URL –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ!")
            print(f"   –¢–µ–∫—É—â–∏–π: {current_url}")
            print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {remote_url}")
            change = input("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π? (y/n): ").strip().lower()
            if change == 'y' or change == '':
                success, _ = run_command(f'git remote set-url origin {remote_url}')
                if success:
                    print("‚úì URL –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å URL")
            else:
                print("‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL")
        else:
            print("‚úì Remote URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π remote
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ remote...")
        success, _ = run_command(f'git remote add origin {remote_url}')
        if not success:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å remote, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            change = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π? (y/n): ").strip().lower()
            if change == 'y' or change == '':
                run_command(f'git remote set-url origin {remote_url}')
            else:
                return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL
    success, output = run_command("git remote get-url origin", check=False)
    if success:
        print(f"‚úì Remote –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {output.strip()}")
    
    return True


def commit_and_push():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–º–∏—Ç –∏ –ø—É—à"""
    print("\n" + "="*60)
    print("–ö–æ–º–º–∏—Ç –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print("\nüìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    run_command("git status")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    success, output = run_command("git diff --cached --name-only", check=False)
    has_staged = success and output.strip()
    
    if not has_staged:
        print("\n‚ö† –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã...")
        run_command("git add .")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç—ã
    success, output = run_command("git log --oneline -1", check=False)
    has_commits = success and output.strip()
    
    if not has_commits:
        message = input("\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
        if not message:
            message = "Initial commit: Document Image Extractor & OCR Tool"
        
        print(f"\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: {message}")
        success, _ = run_command(f'git commit -m "{message}"')
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞")
            return False
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤–µ—Ç–∫—É –≤ main, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    success, output = run_command("git branch --show-current", check=False)
    current_branch = output.strip() if success else "master"
    
    if current_branch != "main":
        print(f"\nüîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ {current_branch} -> main")
        run_command("git branch -M main")
    
    # Push
    print("\nüöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub...")
    success, output = run_command("git push -u origin main", check=False)
    
    if success:
        print("\n" + "="*60)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub")
        print("="*60)
        return True
    else:
        print("\n" + "="*60)
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print("="*60)
        print(f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{output}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "not found" in output.lower() or "repository" in output.lower():
            print("\n‚ö† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ GitHub!")
            print("üìù –î–µ–π—Å—Ç–≤–∏—è:")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://github.com/new")
            print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: document-image-extractor")
            print("3. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore –∏–ª–∏ license")
            print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        elif "authentication" in output.lower() or "denied" in output.lower() or "permission" in output.lower():
            print("\n‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π!")
            print("üìù –î–ª—è HTTPS –Ω—É–∂–µ–Ω Personal Access Token –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è:")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://github.com/settings/tokens")
            print("2. Generate new token (classic)")
            print("3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞: repo (–≤—Å–µ)")
            print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
        elif "could not read" in output.lower():
            print("\n‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω –∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        else:
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub - —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞")
            print("2. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
            print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
        
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git
    check_git_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not check_git_repo():
        print("\n‚ö† –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        init = input("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? (y/n): ").strip().lower()
        if init == 'y':
            run_command("git init")
            print("‚úì Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    username, repo_name, use_ssh = get_repository_info()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º remote
    setup_remote(username, repo_name, use_ssh)
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º
    if commit_and_push():
        print(f"\nüåê –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/{username}/{repo_name}")
    else:
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö† –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

